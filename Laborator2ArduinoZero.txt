/* Arduino Zero Implementation */

#include <LiquidCrystal_I2C.h> // LCD with I2C module

LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x3F, 16, 2);

int volatile temp_q = 0, temp_u;
char h[4]="10:", m[4]="00:", s[3]="00";

void setup()
{
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
   // Set up the generic clock (GCLK4) used to clock timers
  REG_GCLK_GENDIV = GCLK_GENDIV_DIV(3) |          // Divide the 48MHz clock source by divisor 3: 48MHz/3=16MHz
                    GCLK_GENDIV_ID(4);            // Select Generic Clock (GCLK) 4
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization

  REG_GCLK_GENCTRL = GCLK_GENCTRL_IDC |           // Set the duty cycle to 50/50 HIGH/LOW
                     GCLK_GENCTRL_GENEN |         // Enable GCLK4
                     GCLK_GENCTRL_SRC_DFLL48M |   // Set the 48MHz clock source
                     GCLK_GENCTRL_ID(4);          // Select GCLK4
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization

  // Feed GCLK4 to TC4 and TC5
  REG_GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN |         // Enable GCLK4 to TC4 and TC5
                     GCLK_CLKCTRL_GEN_GCLK4 |     // Select GCLK4
                     GCLK_CLKCTRL_ID_TC4_TC5;     // Feed the GCLK4 to TC4 and TC5
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization
 
  REG_TC4_CTRLA |= TC_CTRLA_MODE_COUNT16;           // Set the counter to 16-bit mode
  while (TC4->COUNT16.STATUS.bit.SYNCBUSY);        // Wait for synchronization

  REG_TC4_COUNT16_CC0 = 0x3D09;                      // Set the TC4 CC0 register to some arbitary value
  //while (TC4->COUNT8.STATUS.bit.SYNCBUSY);        // Wait for synchronization
  //REG_TC4_COUNT8_CC1 = 0xAA;                      // Set the TC4 CC1 register to some arbitary value
  //while (TC4->COUNT8.STATUS.bit.SYNCBUSY);        // Wait for synchronization
  //REG_TC4_COUNT8_PER = 0x9C;                      // Set the PER (period) register to its maximum value  156 at 15625 -> 10ms timer
  while (TC4->COUNT16.STATUS.bit.SYNCBUSY);        // Wait for synchronization

  //NVIC_DisableIRQ(TC4_IRQn);
  //NVIC_ClearPendingIRQ(TC4_IRQn);
  NVIC_SetPriority(TC4_IRQn, 0);    // Set the Nested Vector Interrupt Controller (NVIC) priority for TC4 to 0 (highest)
  NVIC_EnableIRQ(TC4_IRQn);         // Connect TC4 to Nested Vector Interrupt Controller (NVIC)

  REG_TC4_INTFLAG |= TC_INTFLAG_OVF;
  REG_TC4_INTENSET = TC_INTENSET_OVF;

  //REG_TC4_INTFLAG |= TC_INTFLAG_MC1 | TC_INTFLAG_MC0 | TC_INTFLAG_OVF;        // Clear the interrupt flags
  //REG_TC4_INTENSET = TC_INTENSET_MC1 | TC_INTENSET_MC0 | TC_INTENSET_OVF;     // Enable TC4 interrupts
  // REG_TC4_INTENCLR = TC_INTENCLR_MC1 | TC_INTENCLR_MC0 | TC_INTENCLR_OVF;     // Disable TC4 interrupts
 
  REG_TC4_CTRLA |= TC_CTRLA_PRESCALER_DIV1024 |     // Set prescaler to 1024, 16MHz/1024 = 15625Hz
                   TC_CTRLA_WAVEGEN_MFRQ |         // Put timer TC4 into match frequency (MFRQ) mode. In this mode the timer counts up to the value in the CC0 register before overflowing and resetting the timer back to 0
                   TC_CTRLA_ENABLE;               // Enable TC4
  while (TC4->COUNT16.STATUS.bit.SYNCBUSY);        // Wait for synchronization

  ADC->INPUTCTRL.bit.MUXPOS = 0x0;                   // Set the analog input to A0
  while(ADC->STATUS.bit.SYNCBUSY);                   // Wait for synchronization
  ADC->SAMPCTRL.bit.SAMPLEN = 0x00;                  // Set max Sampling Time Length to half divided ADC clock pulse (2.66us)
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |      // Divide Clock ADC GCLK by 512 (48MHz/512 = 93.7kHz)
                   ADC_CTRLB_RESSEL_12BIT |          // Set the ADC resolution to 12 bits
                   ADC_CTRLB_FREERUN;                // Set the ADC to free run
  while(ADC->STATUS.bit.SYNCBUSY);                   // Wait for synchronization 
  NVIC_SetPriority(ADC_IRQn, 0);    // Set the Nested Vector Interrupt Controller (NVIC) priority for the ADC to 0 (highest)
  NVIC_EnableIRQ(ADC_IRQn);         // Connect the ADC to Nested Vector Interrupt Controller (NVIC)
  ADC->INTENSET.reg = ADC_INTENSET_RESRDY;           // Generate interrupt on result ready (RESRDY)
  ADC->CTRLA.bit.ENABLE = 1;                         // Enable the ADC
  while(ADC->STATUS.bit.SYNCBUSY);                   // Wait for synchronization
  ADC->SWTRIG.bit.START = 1;                         // Initiate a software trigger to start an ADC conversion
  while(ADC->STATUS.bit.SYNCBUSY);                   // Wait for synchronization

}

void loop()
{
  
}

void ADC_Handler()
{ 
  if (ADC->INTFLAG.bit.RESRDY)                       // Check if the result ready (RESRDY) flag has been set
  {
    ADC->INTFLAG.bit.RESRDY = 1;                     // Clear the RESRDY flag
    while(ADC->STATUS.bit.SYNCBUSY);                 // Wait for read synchronization
    temp_q = ADC->RESULT.reg;                        // Read the result;
    float q = 5000.0/1023;
    temp_u = temp_q*q; // mV
    temp_u = temp_u/10-50; // grade C
  }
}

void TC4_Handler()
{
  if (TC4->COUNT16.INTFLAG.bit.OVF && TC4->COUNT16.INTENSET.bit.OVF)
  {
    char buf[17] = "Temperatura ", aux[3];
    //snprintf(buf, 17, "Temperatura %d'C", temp_u); ??
    itoa(temp_u, aux, 10);
    strcat(buf, aux);
    strcat(buf, "'C");
    lcd.setCursor(0, 0);
    lcd.print(buf);
    strcpy(buf, "Ora ");
    strcat(buf, h);
    strcat(buf, m);
    strcat(buf, s);
    lcd.setCursor(0, 1);
    lcd.print(buf);
    if(s[1] == '9')
    {
      if(s[0] == '5')
      {
        if(m[1] == '9')
        {
          if(m[0] == '5')
          {
            if(h[1] == '3' && h[0] == '2')
            {
              strcpy(h, "00:");
            }
            else if(h[1] == '9')
            {
              h[0]++;
              h[1] = '0';
            }
            else
            {
              h[1]++;
            }
            m[0] = '0';
            m[1] = '0';
            s[0] = '0';
            s[1] = '0';
          }
          else
          {
            m[0]++;
            m[1] = '0';
          }
        }
        else
        {
         m[1]++;
        }
        s[0] = '0';
        s[1] = '0';
      }
      else
      {
        s[0]++;
        s[1] = '0';
      }
    }
    else
    {
      s[1]++;
    }
    REG_TC4_INTFLAG = TC_INTFLAG_OVF; 
  }
}