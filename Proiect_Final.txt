/* Arduino Zero Implementation */

#include <FlashAsEEPROM.h>
#include "DHT.h"
#include <LiquidCrystal_I2C.h> // LCD with I2C module

DHT dht(7, DHT11);
LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x3F, 16, 2);

#define BUTTON_OK PORT_PA14
#define BUTTON_CANCEL PORT_PA09
#define BUTTON_PREV PORT_PA08
#define BUTTON_NEXT PORT_PA15

enum Buttons {
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus {
  MENU_MAIN = 0,
  MENU_KP,
  MENU_KD,
  MENU_KI,
  MENU_TEMP,
  MENU_PROGRAM_1,
  MENU_PROGRAM_2,
  MENU_PROGRAM_3,
  MENU_PROGRAM,
  MENU_MAX_NUM
};

/* PID: R(s) = (Ks*s^2 + Kp*s + Ki)/s -> R[z] = (z^2(100*Kd + Kp + 0.01*Ki) + z(-Kp - 200*Kd) + 100*Kd)/(z^2 - z) */
/*                                  h = 0.01 (10ms)                                                               */ 
/* 
  => PID Coefs: c1 = 100*Kd
                c2 = -Kp - 200*Kd
                c3 = 100*Kd + Kp + 0.01Ki
                d = 1
*/

/* PT1: H(s) = 1/(s+1) -> H[z] = 0.01*z/(1.01*z - 1) */
/*                   h = 0.01 (10ms)                 */
/*
   => PT1 Coefs: a1 = 0.009
                 a2 = 0
                 b = 0.99
*/
double moving_sp;
float current_temp = 0;
int timp_inc = 0, timp_men = 0, timp_rac = 0, uptime = -1;
double x[2] = {0, 0}, y[2] = {0, 0}, u[3] = {0, 0, 0};
/* PID Coefs -> will be recalculated each Kp, Ki, Kd change */
/* PT1 Coefs */
const double a1 = 0.009, a2 = 0, b = 0.99; 
float temp_q = 0;
char refresh_rate = 10;
Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;

typedef struct {
  boolean valid;
  double kp;
  double ki;
  double kd;
  double temp;
  double c1;
  double c2;
  double c3;
}EEPROM_values;

EEPROM_values read_values;

FlashStorage(saved_values, EEPROM_values);

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void afisare_timp(void)
{
  int minut = 0; int sec = 0;
  int remaining = 0;
  lcd.setCursor(0, 0);
  lcd.print("T:");
  lcd.print(current_temp);
  lcd.print(" S:");
  lcd.print(read_values.temp);
  lcd.setCursor(0, 1);
  if(uptime >= 0)
  {
    lcd.setCursor(0, 1);
    lcd.print("P:");
    uptime++;
    if(uptime/10 <= timp_inc)
    {
      remaining = timp_inc - uptime/10;
      moving_sp = current_temp + (read_values.temp-current_temp) * (timp_inc - remaining)/timp_inc;
      lcd.print(moving_sp);
      lcd.print("TInc:");
    }
    else if(uptime/10 <= (timp_inc + timp_men))
    {
      remaining = (timp_inc + timp_men) - uptime/10;
      lcd.print(moving_sp);
      lcd.print("TMen:");
    }
    else if(uptime/10 <= (timp_inc + timp_men + timp_rac))
    {
      remaining = (timp_inc + timp_men + timp_rac) - uptime/10;
      moving_sp = read_values.temp - (read_values.temp-current_temp) * (timp_rac - remaining)/timp_rac;
      lcd.print(moving_sp);
      lcd.print("TRac:");
    }
    else
      uptime = -1;
  }
  else
  {
    lcd.print("Oprit: ");
  }
  minut = remaining/60;
  sec = remaining % 60;
  lcd.print(minut);
  lcd.print(":");
  lcd.print(sec);
}

void print_menu(enum Menus menu)
{
  lcd.clear();
  switch(menu)
  {
    case MENU_KP:
      lcd.print("KP = ");
      lcd.print(read_values.kp);
      break;
    case MENU_KD:
      lcd.print("KD = ");
      lcd.print(read_values.kd);
      break;
    case MENU_KI:
      lcd.print("KI = ");
      lcd.print(read_values.ki);
      break;
    case MENU_TEMP:
      lcd.print("TEMP = ");
      lcd.print(read_values.temp);
      break;
    case MENU_PROGRAM_1:
      lcd.print("TIMP INC = ");
      lcd.print(timp_inc);
      break;
    case MENU_PROGRAM_2:
      lcd.print("TIMP MEN = ");
      lcd.print(timp_men);
      break;
    case MENU_PROGRAM_3:
      lcd.print("TIMP RAC = ");
      lcd.print(timp_rac);
      break;
    case MENU_PROGRAM:
      afisare_timp();
      break;
    case MENU_MAIN:
    default:
      lcd.print("PS 2020");
      break;
  }
  if(current_menu != MENU_MAIN && current_menu != MENU_PROGRAM)
  {
    lcd.setCursor(0,1);
    lcd.print("modifica");
  }
}

void initialize_eeprom()
{
  read_values.kp = 1;
  read_values.ki = 0.1;
  read_values.kd = 0.1;
  read_values.c1 = 100*read_values.kd;
  read_values.c2 = -read_values.kp-200*read_values.kd;
  read_values.c3 = 100*read_values.kd+read_values.kp+0.01*read_values.ki;
  read_values.temp = 36.6;
  read_values.valid = true;
  saved_values.write(read_values);
  /*
   *EEPROM.write(0, read_values.valid);
   *EEPROM.write(1, read_values.kp);
   *EEPROM.write(2, read_values.ki);
   *EEPROM.write(2, read_values.kd);
   *EEPROM.write(2, read_values.c1);
   *EEPROM.write(2, read_values.c2);
   *EEPROM.write(2, read_values.c3);
   *EEPROM.write(2, read_values.temp);
   *EEPROM.commit();
  */
}

void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_kp(void)
{
  save_kpid();
  scroll_menu = MENU_KP;
  current_menu = MENU_MAIN;
}

void go_ki(void)
{
  save_kpid();
  scroll_menu = MENU_KI;
  current_menu = MENU_MAIN;
}


void go_kd(void)
{
  save_kpid();
  scroll_menu = MENU_KD;
  current_menu = MENU_MAIN;
}


void go_temp(void)
{
  save_temp();
  scroll_menu = MENU_TEMP;
  current_menu = MENU_MAIN;
}


void go_timp_inc(void)
{
  scroll_menu = MENU_PROGRAM_1;
  current_menu = MENU_MAIN;
}

void go_timp_men(void)
{
  scroll_menu = MENU_PROGRAM_2;
  current_menu = MENU_MAIN;
}

void go_timp_rac(void)
{
  scroll_menu = MENU_PROGRAM_3;
  current_menu = MENU_MAIN;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % 247 % MENU_MAX_NUM);
}

void start_program(void)
{
  uptime = 0;
  y[0] = y[1] = x[0] = x[1] = u[0] = u[1] = u[2] = 0;
  REG_TCC2_CTRLA |= TCC_CTRLA_ENABLE; // Enable the TCC2 output
}

void save_kpid(void)
{
  read_values.c1 = 100*read_values.kd;
  read_values.c2 = -read_values.kp-200*read_values.kd;
  read_values.c3 = 100*read_values.kd+read_values.kp+0.01*read_values.ki;
  saved_values.write(read_values);
}

void inc_timp_inc(void)
{
  timp_inc++;
}

void dec_timp_inc(void)
{
  timp_inc--;
}

void inc_timp_men(void)
{
  timp_men++;
}

void dec_timp_men(void)
{
  timp_men--;
}

void inc_timp_rac(void)
{
  timp_rac++;
}

void dec_timp_rac(void)
{
  timp_rac--;
}

void inc_kp(void)
{
  read_values.kp+=0.1;
}

void dec_kp(void)
{
  read_values.kp-=0.1;
}

void inc_kd(void)
{
  read_values.kd+=0.1;
}

void dec_kd(void)
{
  read_values.kd-=0.1;
}

void inc_ki(void)
{
  read_values.ki+=0.1;
}

void dec_ki(void)
{
  read_values.ki-=0.1;
}

void save_temp(void)
{
  saved_values.write(read_values);
}

void inc_temp(void)
{
  read_values.temp+=0.1;
}

void dec_temp(void)
{
  read_values.temp-=0.1;
}

//void ADC_Handler()
//{ 
//  if (ADC->INTFLAG.bit.RESRDY)                       // Check if the result ready (RESRDY) flag has been set
//  {
//    ADC->INTFLAG.bit.RESRDY = 1;                     // Clear the RESRDY flag
//    while(ADC->STATUS.bit.SYNCBUSY);                 // Wait for read synchronization
//    temp_q = ADC->RESULT.reg;                        // Read the result;
//    float q = 5000.0/1023;
//    temp_u = temp_q*q; // mV
//    temp_u = temp_u/10-50; // grade C
//  }
//}

state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {go_kp, go_home, inc_kp, dec_kp},       // MENU_KP
  {go_kd, go_home, inc_kd, dec_kd},       // MENU_KD
  {go_ki, go_home, inc_ki, dec_ki},       // MENU_KI
  {go_temp, go_home, inc_temp, dec_temp},   // MENU_TEMP
  {go_timp_inc, go_home, inc_timp_inc, dec_timp_inc},   // MENU_PROGRAM_1
  {go_timp_men, go_home, inc_timp_men, dec_timp_men},   // MENU_PROGRAM_2
  {go_timp_rac, go_home, inc_timp_rac, dec_timp_rac},   // MENU_PROGRAM_3
  {start_program, go_home, go_home, go_home},   // MENU_PROGRAM
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (REG_PORT_IN0 & BUTTON_OK)
  {
    ret_val = EV_OK;
  }
  else if (REG_PORT_IN0 & BUTTON_CANCEL)
  {
    ret_val = EV_CANCEL;
  }
  else if (REG_PORT_IN0 & BUTTON_NEXT)
  {
    ret_val = EV_NEXT;
  }
  else if (REG_PORT_IN0 & BUTTON_PREV)
  {
    ret_val = EV_PREV;
  }
  return ret_val;
}

void setup()
{
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
   // Set up the generic clock (GCLK4) used to clock timers
  REG_GCLK_GENDIV = GCLK_GENDIV_DIV(3) |          // Divide the 48MHz clock source by divisor 3: 48MHz/3=16MHz
                    GCLK_GENDIV_ID(4);            // Select Generic Clock (GCLK) 4
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization

  REG_GCLK_GENCTRL = GCLK_GENCTRL_IDC |           // Set the duty cycle to 50/50 HIGH/LOW
                     GCLK_GENCTRL_GENEN |         // Enable GCLK4
                     GCLK_GENCTRL_SRC_DFLL48M |   // Set the 48MHz clock source
                     GCLK_GENCTRL_ID(4);          // Select GCLK4
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization

  // Feed GCLK4 to TCC2 (16 bit timer) and TC3 (8 bit timer)
  REG_GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN |         // Enable GCLK4 to TC4 and TC5
                     GCLK_CLKCTRL_GEN_GCLK4 |     // Select GCLK4
                     GCLK_CLKCTRL_ID_TCC2_TC3;   // Feed GCLK4 to TCC2 and TC3
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization

  REG_TC3_CTRLA |= TC_CTRLA_MODE_COUNT8;           // Set the counter to 8-bit mode
  while (TC3->COUNT8.STATUS.bit.SYNCBUSY);        // Wait for synchronization

  REG_TC3_COUNT8_PER = 0x9C;			// Set overflow value for 10ms
  while (TC3->COUNT8.STATUS.bit.SYNCBUSY);	// Wait for synchronization

  NVIC_SetPriority(TC3_IRQn, 1);		// Set priority 1 for TC3
  NVIC_EnableIRQ(TC3_IRQn);			// Enable priority

  REG_TC3_INTFLAG |= TC_INTFLAG_OVF;		// Clear timer interrupt
  REG_TC3_INTENSET = TC_INTENSET_OVF; 		// Enable timer interrupt

  REG_TC3_CTRLA |= TC_CTRLA_PRESCALER_DIV1024 |     // Set prescaler to 1024, 16MHz/1024 = 15625Hz
                   TC_CTRLA_ENABLE;		   // Start timer
   
  // Enable the port multiplexer for the digital pin D11
  PORT->Group[g_APinDescription[11].ulPort].PINCFG[g_APinDescription[11].ulPin].bit.PMUXEN = 1;
 
  // Connect the TCC2 timer to digital output D11 - port pins are paired odd PMUO and even PMUXE
  // F & E specify the timers: TCC0, TCC1 and TCC2
  PORT->Group[g_APinDescription[11].ulPort].PMUX[g_APinDescription[11].ulPin >> 1].reg = PORT_PMUX_PMUXO_E | PORT_PMUX_PMUXE_E;
  // Dual slope PWM operation: timers countinuously count up to PER register value then down 0

  REG_TCC2_WAVE |= TCC_WAVE_POL(0xF) |         // Reverse the output polarity on all TCC2 outputs
                    TCC_WAVE_WAVEGEN_DSBOTH;    // Setup dual slope PWM on TCC2
  while (TCC2->SYNCBUSY.bit.WAVE);               // Wait for synchronization
  // Each timer counts up to a maximum or TOP value set by the PER register,
  // this determines the frequency of the PWM operation:
  // Divide the 16MHz signal by 1 giving 16MHz (625ns) TCC2 timer tick and enable the outputs
  NVIC_SetPriority(TCC2_IRQn, 0);		// Set priority 0 for TCC2
  NVIC_EnableIRQ(TCC2_IRQn);			// Enable timer interrupt
  REG_TCC2_INTFLAG |= TCC_INTFLAG_OVF; 		// Clear timer interrupt
  REG_TCC2_CTRLA |= TCC_CTRLA_PRESCALER_DIV256;    // Divide GCLK4 by 256
  while (TCC2->SYNCBUSY.bit.ENABLE);              // Wait for synchronization

//  ADC->INPUTCTRL.bit.MUXPOS = 0x0;                   // Set the analog input to A0
//  while(ADC->STATUS.bit.SYNCBUSY);                   // Wait for synchronization
//  ADC->SAMPCTRL.bit.SAMPLEN = 0x00;                  // Set max Sampling Time Length to half divided ADC clock pulse (2.66us)
//  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |      // Divide Clock ADC GCLK by 512 (48MHz/512 = 93.7kHz)
//                   ADC_CTRLB_RESSEL_12BIT |          // Set the ADC resolution to 12 bits
//                   ADC_CTRLB_FREERUN;                // Set the ADC to free run
//  while(ADC->STATUS.bit.SYNCBUSY);                   // Wait for synchronization 
//  NVIC_SetPriority(ADC_IRQn, 2);    // Set the Nested Vector Interrupt Controller (NVIC) priority for the ADC
//  NVIC_EnableIRQ(ADC_IRQn);         // Connect the ADC to Nested Vector Interrupt Controller (NVIC)
//  ADC->INTENSET.reg = ADC_INTENSET_RESRDY;           // Generate interrupt on result ready (RESRDY)
//  ADC->CTRLA.bit.ENABLE = 1;                         // Enable the ADC
//  while(ADC->STATUS.bit.SYNCBUSY);                   // Wait for synchronization
//  ADC->SWTRIG.bit.START = 1;                         // Initiate a software trigger to start an ADC conversion
//  while(ADC->STATUS.bit.SYNCBUSY);                   // Wait for synchronization
  
  read_values = saved_values.read();
  if(read_values.valid == false)
  {
    initialize_eeprom();
  }
  dht.begin();
}

void loop()
{
  float f = dht.readTemperature();
  if(!isnan(f))
    current_temp = f;
}

void TC3_Handler()   // Interrupt Service Routine (ISR) for timer TC3
{     
//   Check for overflow (OVF) interrupt
  if (TC3->COUNT8.INTFLAG.bit.OVF && TC3->COUNT8.INTENSET.bit.OVF)             
  {
    if(uptime >= 0)
    {
      u[2] = moving_sp - y[1];
      x[1] = read_values.c1*u[0]+read_values.c2*u[1]+read_values.c3*u[2]+x[0];
      y[1] = a1*x[1]+a2*x[0]+b*y[0]; // this will be the adjusted output
      Serial.println(y[1]);
      REG_TCC2_PER = y[1];  // Set the frequency of the PWM on TCC2 to 261Hz
      while (TCC2->SYNCBUSY.bit.PER); // Wait for synchronization
      REG_TCC2_CCB0 = y[1]/2; // TCC2 CCB0 - on D11
      while (TCC2->SYNCBUSY.bit.CCB0);  // Wait for synchronization
      y[0] = y[1];
      x[0] = x[1];
      u[0] = u[1];
      u[1] = u[2];
    }
    refresh_rate--;
    if(refresh_rate == 0)
    {
      refresh_rate = 10;
      volatile Buttons event = GetButtons();
      if (event != EV_NONE)
      {
        state_machine(current_menu, event);
      }
      print_menu(scroll_menu);
    }
    REG_TC3_INTFLAG = TC_INTFLAG_OVF;         // Clear the MC1 interrupt flag
  }
}
