/* Arduino Zero Implementation */

#include <LiquidCrystal_I2C.h> // LCD with I2C module

LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x3F, 16, 2);

#define BUTTON_OK PORT_PA14
#define BUTTON_CANCEL PORT_PA09
#define BUTTON_PREV PORT_PA08
#define BUTTON_NEXT PORT_PA15

enum Buttons {
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus {
  MENU_MAIN = 0,
  MENU_KP,
  MENU_KD,
  MENU_KI,
  MENU_TEMP,
  MENU_PROGRAM_1,
  MENU_PROGRAM_2,
  MENU_PROGRAM_3,
  MENU_PROGRAM,
  MENU_MAX_NUM
};

/* PID: R(s) = (Ks*s^2 + Kp*s + Ki)/s -> R[z] = (z^2(100*Kd + Kp + 0.01*Ki) + z(-Kp - 200*Kd) + 100*Kd)/(z^2 - z) */
/*                                  h = 0.01 (10ms)                                                               */ 
/* 
  => PID Coefs: c1 = 100*Kd
                c2 = -Kp - 200*Kd
                c3 = 100*Kd + Kp + 0.01Ki
                d = 1
*/

/* PT1: H(s) = 1/(s+1) -> H[z] = 0.01*z/(1.01*z - 1) */
/*                   h = 0.01 (10ms)                 */
/*
   => PT1 Coefs: a1 = 0.009
                 a2 = 0
                 b = 0.99
*/
double temp = 36.6, moving_sp = 0;
int timp_inc = 0, timp_men = 0, timp_rac = 0, uptime;
double kp = 1, ki = 0.1, kd = 0.1;
double x[2] = {0, 0}, y[2] = {0, 0}, u[3] = {0, 0, 0};
/* PID Coefs -> will be recalculated each Kp, Ki, Kd change */
double c1 = 100*kd, c2 = -kp-200*kd, c3 = 100*kd+kp+0.01*ki, d = 1;
/* PT1 Coefs */
const double a1 = 0.009, a2 = 0, b = 0.99; 
float temp_q = 0;
Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void afisare_timp(void)
{
  int minut = 0; int sec = 0;
  int remaining = 0;
  uptime++;
  lcd.setCursor(0, 0);
  lcd.print("SP: ");
  lcd.print(moving_sp);
  lcd.setCursor(0, 1);
  if(uptime/10 <= timp_inc)
  {
    lcd.print(" TInc: ");
    remaining = timp_inc - uptime/10;
    moving_sp = temp * (timp_inc - remaining)/timp_inc;
  }
  else if(uptime/10 <= (timp_inc + timp_men))
  {
    lcd.print(" TMen: ");
    remaining = (timp_inc + timp_men) - uptime/10;
  }
  else if(uptime/10 <= (timp_inc + timp_men + timp_rac))
  {
    lcd.print(" TRac: ");
    remaining = (timp_inc + timp_men + timp_rac) - uptime/10;
    moving_sp = temp - temp * (timp_rac - remaining)/timp_rac;
  }
  else
  {
    lcd.print("Oprit: ");
  }
  minut = remaining/60;
  sec = remaining % 60;
  lcd.print(minut);
  lcd.print(":");
  lcd.print(sec);
}

void print_menu(enum Menus menu)
{
  lcd.clear();
  switch(menu)
  {
    case MENU_KP:
      lcd.print("KP = ");
      lcd.print(kp);
      break;
    case MENU_KD:
      lcd.print("KD = ");
      lcd.print(kd);
      break;
    case MENU_KI:
      lcd.print("KI = ");
      lcd.print(ki);
      break;
    case MENU_TEMP:
      lcd.print("TEMP = ");
      lcd.print(temp);
      break;
    case MENU_PROGRAM_1:
      lcd.print("TIMP INC = ");
      lcd.print(timp_inc);
      break;
    case MENU_PROGRAM_2:
      lcd.print("TIMP MEN = ");
      lcd.print(timp_men);
      break;
    case MENU_PROGRAM_3:
      lcd.print("TIMP RAC = ");
      lcd.print(timp_rac);
      break;
    case MENU_PROGRAM:
      afisare_timp();
      break;
    case MENU_MAIN:
    default:
      lcd.print("PS 2020");
      break;
  }
  if(current_menu != MENU_MAIN && current_menu != MENU_PROGRAM)
  {
    lcd.setCursor(0,1);
    lcd.print("modifica");
  }
}

void enter_menu(void)
{
  if(scroll_menu == MENU_PROGRAM)
    uptime = 0;
  current_menu = scroll_menu;
}

void go_home(void)
{
  if(current_menu == MENU_KP || current_menu == MENU_KD || current_menu == MENU_KI)
    save_kpid();
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void save_kpid(void)
{
  c1 = 100*kd;
  c2 = -kp-200*kd;
  c3 = 100*kd+kp+0.01*ki;
}

void inc_timp_inc(void)
{
  timp_inc++;
}

void dec_timp_inc(void)
{
  timp_inc--;
}

void inc_timp_men(void)
{
  timp_men++;
}

void dec_timp_men(void)
{
  timp_men--;
}

void inc_timp_rac(void)
{
  timp_rac++;
}

void dec_timp_rac(void)
{
  timp_rac--;
}

void inc_kp(void)
{
  kp++;
}

void dec_kp(void)
{
  kp--;
}

void inc_kd(void)
{
  kd++;
}

void dec_kd(void)
{
  kd--;
}

void inc_ki(void)
{
  ki++;
}

void dec_ki(void)
{
  ki--;
}

void save_temp(void)
{
}

void inc_temp(void)
{
  temp+=0.1;
}

void dec_temp(void)
{
  temp-=0.1;
}


state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {go_home, go_home, inc_kp, dec_kp},       // MENU_KP
  {go_home, go_home, inc_kd, dec_kd},       // MENU_KD
  {go_home, go_home, inc_ki, dec_ki},       // MENU_KI
  {go_home, go_home, inc_temp, dec_temp},   // MENU_TEMP
  {go_home, go_home, inc_timp_inc, dec_timp_inc},   // MENU_PROGRAM_1
  {go_home, go_home, inc_timp_men, dec_timp_men},   // MENU_PROGRAM_2
  {go_home, go_home, inc_timp_rac, dec_timp_rac},   // MENU_PROGRAM_3
  {go_home, go_home, go_home, go_home},   // MENU_PROGRAM
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (REG_PORT_IN0 & BUTTON_OK)
  {
    ret_val = EV_OK;
  }
  else if (REG_PORT_IN0 & BUTTON_CANCEL)
  {
    ret_val = EV_CANCEL;
  }
  else if (REG_PORT_IN0 & BUTTON_NEXT)
  {
    ret_val = EV_NEXT;
  }
  else if (REG_PORT_IN0 & BUTTON_PREV)
  {
    ret_val = EV_PREV;
  }
  return ret_val;
}

void setup()
{
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
   // Set up the generic clock (GCLK4) used to clock timers
  REG_GCLK_GENDIV = GCLK_GENDIV_DIV(3) |          // Divide the 48MHz clock source by divisor 3: 48MHz/3=16MHz
                    GCLK_GENDIV_ID(4);            // Select Generic Clock (GCLK) 4
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization

  REG_GCLK_GENCTRL = GCLK_GENCTRL_IDC |           // Set the duty cycle to 50/50 HIGH/LOW
                     GCLK_GENCTRL_GENEN |         // Enable GCLK4
                     GCLK_GENCTRL_SRC_DFLL48M |   // Set the 48MHz clock source
                     GCLK_GENCTRL_ID(4);          // Select GCLK4
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization

  // Feed GCLK4 to TC4 and TC5
  REG_GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN |         // Enable GCLK4 to TC4 and TC5
                     GCLK_CLKCTRL_GEN_GCLK4 |     // Select GCLK4
                     GCLK_CLKCTRL_ID_TC4_TC5;     // Feed the GCLK4 to TC4 and TC5
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization
 
  REG_TC4_CTRLA |= TC_CTRLA_MODE_COUNT8;           // Set the counter to 8-bit mode
  while (TC4->COUNT8.STATUS.bit.SYNCBUSY);        // Wait for synchronization
  
  REG_TC5_CTRLA |= TC_CTRLA_MODE_COUNT16;
  while (TC5->COUNT16.STATUS.bit.SYNCBUSY);
  //REG_TC4_COUNT8_CC0 = 0x9C;                      // Set the TC4 CC0 register to some arbitary value
  //while (TC4->COUNT8.STATUS.bit.SYNCBUSY);        // Wait for synchronization
  //REG_TC4_COUNT8_CC1 = 0xAA;                      // Set the TC4 CC1 register to some arbitary value
  //while (TC4->COUNT8.STATUS.bit.SYNCBUSY);        // Wait for synchronization
  REG_TC4_COUNT8_PER = 0x9C;                      // Set the PER (period) register to its maximum value  156 at 15625 -> 10ms timer
  while (TC4->COUNT8.STATUS.bit.SYNCBUSY);        // Wait for synchronization

  REG_TC5_COUNT16_CC0 = 0x061A;
  while (TC5->COUNT16.STATUS.bit.SYNCBUSY);

  //NVIC_DisableIRQ(TC4_IRQn);
  //NVIC_ClearPendingIRQ(TC4_IRQn);
  NVIC_SetPriority(TC4_IRQn, 0);    // Set the Nested Vector Interrupt Controller (NVIC) priority for TC4 to 0 (highest)
  NVIC_EnableIRQ(TC4_IRQn);         // Connect TC4 to Nested Vector Interrupt Controller (NVIC)

  NVIC_SetPriority(TC5_IRQn, 1);
  NVIC_EnableIRQ(TC5_IRQn);

  REG_TC4_INTFLAG |= TC_INTFLAG_OVF;
  REG_TC4_INTENSET = TC_INTENSET_OVF;

  //REG_TC4_INTFLAG |= TC_INTFLAG_MC1 | TC_INTFLAG_MC0 | TC_INTFLAG_OVF;        // Clear the interrupt flags
  //REG_TC4_INTENSET = TC_INTENSET_MC1 | TC_INTENSET_MC0 | TC_INTENSET_OVF;     // Enable TC4 interrupts
  // REG_TC4_INTENCLR = TC_INTENCLR_MC1 | TC_INTENCLR_MC0 | TC_INTENCLR_OVF;     // Disable TC4 interrupts

  REG_TC5_INTFLAG |= TC_INTFLAG_OVF;
  REG_TC5_INTENSET = TC_INTENSET_OVF;
 
  REG_TC4_CTRLA |= TC_CTRLA_PRESCALER_DIV1024 |     // Set prescaler to 1024, 16MHz/1024 = 15625Hz
                   TC_CTRLA_ENABLE;               // Enable TC4
  while (TC4->COUNT8.STATUS.bit.SYNCBUSY);        // Wait for synchronization

  REG_TC5_CTRLA |= TC_CTRLA_PRESCALER_DIV1024 |     // Set prescaler to 1024, 16MHz/1024 = 15625Hz
                   TC_CTRLA_WAVEGEN_MFRQ |
                   TC_CTRLA_ENABLE;
  while (TC5->COUNT16.STATUS.bit.SYNCBUSY);
}

void loop()
{
  
}

void TC4_Handler()   // Interrupt Service Routine (ISR) for timer TC4
{     
//   Check for overflow (OVF) interrupt
  if (TC4->COUNT8.INTFLAG.bit.OVF && TC4->COUNT8.INTENSET.bit.OVF)             
  {
    u[2] = temp - y[1];
    x[1] = c1*u[0]+c2*u[1]+c3*u[2]+d*x[0];
    y[1] = a1*x[1]+a2*x[0]+b*y[0]; // this will be the adjusted output
    Serial.println(y[1]);
    y[0] = y[1];
    x[0] = x[1];
    u[0] = u[1];
    u[1] = u[2];
    REG_TC4_INTFLAG = TC_INTFLAG_OVF;         // Clear the OVF interrupt flag
  }

  // Check for match counter 0 (MC0) interrupt
//  if (TC4->COUNT8.INTFLAG.bit.MC0 && TC4->COUNT8.INTENSET.bit.MC0)             
//  {
//    // Put your counter compare 0 (CC0) code here:
//    // ...
//    REG_TC4_INTFLAG = TC_INTFLAG_MC0;         // Clear the MC0 interrupt flag
//  }

  // Check for match counter 1 (MC1) interrupt
//  if (TC4->COUNT8.INTFLAG.bit.MC1 && TC4->COUNT8.INTENSET.bit.MC1)           
//  {
//    // Put your counter compare 1 (CC1) code here:
//    // ...
//   
//    REG_TC4_INTFLAG = TC_INTFLAG_MC1;        // Clear the MC1 interrupt flag
//  }
}

void TC5_Handler()
{
  // Check for overflow (OVF) interrupt
  if (TC5->COUNT16.INTFLAG.bit.OVF && TC5->COUNT16.INTENSET.bit.OVF)             
  {
    volatile Buttons event = GetButtons();
    if (event != EV_NONE)
    {
      state_machine(current_menu, event);
    }
    print_menu(scroll_menu);
    /* PID - PT1 implementation */
    REG_TC5_INTFLAG = TC_INTFLAG_OVF;         // Clear the OVF interrupt flag
  }
}